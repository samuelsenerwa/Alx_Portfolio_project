{"ast":null,"code":"import _slicedToArray from \"/home/senerwa/Web/portfolio_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/senerwa/Web/portfolio_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { LeafletProvider, createLeafletContext } from '@react-leaflet/core';\nimport { Map as LeafletMap } from 'leaflet';\nimport React, { forwardRef, useCallback, useEffect, useImperativeHandle, useState } from 'react';\nfunction MapContainerComponent(_ref, forwardedRef) {\n  var bounds = _ref.bounds,\n    boundsOptions = _ref.boundsOptions,\n    center = _ref.center,\n    children = _ref.children,\n    className = _ref.className,\n    id = _ref.id,\n    placeholder = _ref.placeholder,\n    style = _ref.style,\n    whenReady = _ref.whenReady,\n    zoom = _ref.zoom,\n    options = _objectWithoutProperties(_ref, [\"bounds\", \"boundsOptions\", \"center\", \"children\", \"className\", \"id\", \"placeholder\", \"style\", \"whenReady\", \"zoom\"]);\n  var _useState = useState({\n      className: className,\n      id: id,\n      style: style\n    }),\n    _useState2 = _slicedToArray(_useState, 1),\n    props = _useState2[0];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    context = _useState4[0],\n    setContext = _useState4[1];\n  useImperativeHandle(forwardedRef, function () {\n    return context?.map ?? null;\n  }, [context]);\n  var mapRef = useCallback(function (node) {\n    if (node !== null && context === null) {\n      var map = new LeafletMap(node, options);\n      if (center != null && zoom != null) {\n        map.setView(center, zoom);\n      } else if (bounds != null) {\n        map.fitBounds(bounds, boundsOptions);\n      }\n      if (whenReady != null) {\n        map.whenReady(whenReady);\n      }\n      setContext(createLeafletContext(map));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(function () {\n    return function () {\n      context?.map.remove();\n    };\n  }, [context]);\n  var contents = context ? /*#__PURE__*/React.createElement(LeafletProvider, {\n    value: context\n  }, children) : placeholder ?? null;\n  return /*#__PURE__*/React.createElement(\"div\", _extends({}, props, {\n    ref: mapRef\n  }), contents);\n}\nexport var MapContainer = /*#__PURE__*/forwardRef(MapContainerComponent);","map":null,"metadata":{},"sourceType":"module"}