{"ast":null,"code":"import { useEffect, useRef } from 'react';\nexport function createElementObject(instance, context, container) {\n  return Object.freeze({\n    instance: instance,\n    context: context,\n    container: container\n  });\n}\nexport function createElementHook(createElement, updateElement) {\n  if (updateElement == null) {\n    return function useImmutableLeafletElement(props, context) {\n      var elementRef = useRef();\n      if (!elementRef.current) elementRef.current = createElement(props, context);\n      return elementRef;\n    };\n  }\n  return function useMutableLeafletElement(props, context) {\n    var elementRef = useRef();\n    if (!elementRef.current) elementRef.current = createElement(props, context);\n    var propsRef = useRef(props);\n    var instance = elementRef.current.instance;\n    useEffect(function updateElementProps() {\n      if (propsRef.current !== props) {\n        updateElement(instance, props, propsRef.current);\n        propsRef.current = props;\n      }\n    }, [instance, props, context]);\n    return elementRef;\n  };\n}","map":null,"metadata":{},"sourceType":"module"}