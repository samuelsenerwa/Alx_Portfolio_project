{"ast":null,"code":"import _slicedToArray from \"/home/senerwa/Web/portfolio_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/senerwa/Web/portfolio_project/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { LeafletProvider, createContainerComponent, createControlHook, createElementHook, createElementObject, extendContext, useLeafletContext } from '@react-leaflet/core';\nimport { Control } from 'leaflet';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nexport var useLayersControlElement = createElementHook(function createLayersControl(_ref, ctx) {\n  var _c = _ref.children,\n    options = _objectWithoutProperties(_ref, [\"children\"]);\n  var control = new Control.Layers(undefined, undefined, options);\n  return createElementObject(control, extendContext(ctx, {\n    layersControl: control\n  }));\n}, function updateLayersControl(control, props, prevProps) {\n  if (props.collapsed !== prevProps.collapsed) {\n    if (props.collapsed === true) {\n      control.collapse();\n    } else {\n      control.expand();\n    }\n  }\n});\nexport var useLayersControl = createControlHook(useLayersControlElement);\n// @ts-ignore\nexport var LayersControl = createContainerComponent(useLayersControl);\nexport function createControlledLayer(addLayerToControl) {\n  return function ControlledLayer(props) {\n    var parentContext = useLeafletContext();\n    var propsRef = useRef(props);\n    var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      layer = _useState2[0],\n      setLayer = _useState2[1];\n    var layersControl = parentContext.layersControl,\n      map = parentContext.map;\n    var addLayer = useCallback(function (layerToAdd) {\n      if (layersControl != null) {\n        if (propsRef.current.checked) {\n          map.addLayer(layerToAdd);\n        }\n        addLayerToControl(layersControl, layerToAdd, propsRef.current.name);\n        setLayer(layerToAdd);\n      }\n    }, [layersControl, map]);\n    var removeLayer = useCallback(function (layerToRemove) {\n      layersControl?.removeLayer(layerToRemove);\n      setLayer(null);\n    }, [layersControl]);\n    var context = useMemo(function () {\n      return extendContext(parentContext, {\n        layerContainer: {\n          addLayer: addLayer,\n          removeLayer: removeLayer\n        }\n      });\n    }, [parentContext, addLayer, removeLayer]);\n    useEffect(function () {\n      if (layer !== null && propsRef.current !== props) {\n        if (props.checked === true && (propsRef.current.checked == null || propsRef.current.checked === false)) {\n          map.addLayer(layer);\n        } else if (propsRef.current.checked === true && (props.checked == null || props.checked === false)) {\n          map.removeLayer(layer);\n        }\n        propsRef.current = props;\n      }\n    });\n    return props.children ? /*#__PURE__*/React.createElement(LeafletProvider, {\n      value: context\n    }, props.children) : null;\n  };\n}\nLayersControl.BaseLayer = createControlledLayer(function addBaseLayer(layersControl, layer, name) {\n  layersControl.addBaseLayer(layer, name);\n});\nLayersControl.Overlay = createControlledLayer(function addOverlay(layersControl, layer, name) {\n  layersControl.addOverlay(layer, name);\n});","map":null,"metadata":{},"sourceType":"module"}